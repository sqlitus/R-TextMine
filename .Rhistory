file_list <- list.files("//wfm-team/Team/Retail Support Team/Reporting/CSQ_By_Interval/September")
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
rm(list=ls())
file_loc <- "\\\\cewp1650\\Chris Jabr Reports\\Extended Metrics.csv"
x <- read.csv(file_loc, header = TRUE)
str(x)
colnames(x)[1] <- "id"
head(x)
str(x)
x$Title <- as.character(x$Title)
x.1 <- x[,c("id","Title")]
str(x.1)
library(ggplot2)
library(tm)
x$Created_Date <- as.Date(x$Created_Date, "%Y/%m/%d")
str(x)
View(x)
x <- read.csv(file_loc, header = TRUE)
x$Title <- as.character(x$Title)
head(x)
str(x)
x.copy <- x
str(x.copy)
x.dates <- x.copy[,c("CreatedDate","ResolvedDate")]
x.dates <- x.copy[,c("Created_Date","Resolved_Date")]
View(x.dates)
str(x.copy)
str(x.dates)
head(x.dates)
x.dates$Created_Date <- as.Date(x.dates$Created_Date)
str(x.dates)
x.dates <- x.copy[,c("Created_Date","Resolved_Date")]
x.dates$Created_Date <- as.Date(x.dates$Created_Date)
x.dates <- x.copy[,c("Created_Date","Resolved_Date")]
str(x.dates)
str(x.dates); head(x.dates)
head(x.dates)
x.dates$Created_Date <- as.Date(x.dates$Created_Date, "%m/%d/%Y")
head(x.dates)
x.dates <- x.copy[,c("Created_Date","Resolved_Date")]
head(x.dates)
x.dates$Cdate <- as.Date(x.dates$Created_Date, "%m/%d/%Y")
head(x.dates)
x.dates$Rdate <- as.Date(x.dates$Resolved_Date, "%m/%d/%Y")
head(x.dates)
rm(x.copy)
x.copy <- x
rm(x.copy)
x$Created_Date <- as.Date(x$Created_Date, "%m/%d/%Y")
str(x)
x$Resolved_Date <- as.Date(x$Resolved_Date, "%m/%d/%Y")
str(x)
View(x.dates)
x$Created_Week_R <- as.Date(cut(x$Created_Date, breaks = "month"))
View(x)
x.dates <- x.dates[,-x.dates$Cdate]
x.dates <- x.dates[,-c("x.dates$Cdate")]
x.dates <- x.dates[-c("x.dates$Cdate")]
x.dates <- x.dates[,-c("x.dates$Cdate")]
x$Created_Month_R <- as.Date(cut(x$Created_Date, breaks = "month"))
x$Created_Week_R <- as.Date(cut(x$Created_Date, breaks = "month"))
View(x)
x$Created_Week_R <- as.Date(cut(x$Created_Date, breaks = "week"))
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = sum, geom = "bar")+
scale_x_date(labels = date_format("%Y-%m"), breaks = "1 month")
library(scales)
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = sum, geom = "bar")+
scale_x_date(labels = date_format("%Y-%m"), breaks = "1 month")
ggplot(x, aes(Created_Month_R, id))+
geom_bar()
colnames(x)[1] <- "id"
ggplot(x, aes(Created_Month_R, id))+
geom_bar()
ggplot(x, aes(Created_Month_R))+
geom_bar()
ggplot(x, aes(Created_Week_R))+
geom_bar()
ggplot(x, aes(Created_Month_R))+
geom_bar()
ggplot(x, aes(Created_Week_R))+
geom_bar()
?stat
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "average", geom = "bar")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "avg", geom = "bar")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "mean", geom = "bar")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")+
scale_x_date()
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")+
scale_x_date(breaks = "1 month")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")+
scale_x_date(breaks = "month")
?scale_x_date
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")+
scale_x_date(date_breaks = "1 month")
ggplot(x, aes(Created_Month_R, Open_To_Resolve_Time__M_))+
stat_summary(fun.y = "sum", geom = "bar")+
scale_x_date(date_breaks = "4 month")
?scale_x_date
install.packages("checkpoint")
library(checkpoint)
require(checkpoint)
require(checkpoint)
library(checkpoint)
ipak("checkpoint")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak("checkpoint")
checkpoint("2017-07-12")
ipak(packages)
packages <- c("qdap","ggplot2")
ipak(packages)
DATA
dput(head(DATA))
freqs <- t(wfm(DATA$state, 1:nrow(DATA)))
df.txt1 <- data.frame(DATA, freqs, check.names = FALSE)
ords <- rev(sort(colSums(freqs)))[1:9] #top 9 words
top9 <- freqs[, names(ords)] #grab those columns from freqs
data.frame(DATA, top9, check.names = FALSE) #put it together
View(df.txt1)
?rev
freqs
colSums(freqs)
DATA
colSums(freqs)
sort(colSums(freqs))
freqs
colSums(freqs)
length(colSums(freqs))
length(freqs)
length(freqs[,~])
summary(freqs)
ncol(freqs)
nrow(freqs)
colSums(freqs)
freqs
nrow(DATA)
1:nrow(DATA)
2:nrow(DATA)
DATA$state
wfm(DATA$state, 1:nrow(DATA))
wfm(DATA$state, 1:nrow(DATA)))
wfm(DATA$state, 1:nrow(DATA))
colSums(freqs)
sort(colSums(freqs))
sort(colSums(freqs))[1:9]
sort(colSums(freqs))[1:ncol(freqs)]
sort(colSums(freqs))[1,ncol(freqs)]
sort(colSums(freqs))[c(1,ncol(freqs))]
wfm(DATA$state, 1:nrow(DATA))
DATA
df2 <- df.txt1
df2
as.integer(as.logical(df2[5:ncol(df2)]))
df2[5]
df2[5:8]
df2[5:ncol(df2)]
ncol(df2[5:ncol(df2)])
df2[6:ncol(df2)] <- as.integer(as.logical(df2[6:ncol(df2)]))
as.logical(df2[6:ncol(df2)])
df2(6:ncol(df2))
df2[(6:ncol(df2))]
as.logical(df2[6:ncol(df2)])
df2[(6:ncol(df2))]
as.data.frame(sapply(df2[(6:ncol(df2))],function(i)
ifelse(i>0,1,0)))
?cbind
cbind(1,1:5)
cbind(c("a","b","c"),1:3)
d <- as.data.frame(cbind(c("a","b","c"),1:3))
d
str(d)
?as.data.frame
d <- as.data.frame(cbind(c("a","b","c"),1:3), colnames("col1","col2"))
d <- as.data.frame(cbind(c("a","b","c"),1:3), col.names=c("col1","col2"))
d
d <- as.data.frame(cbind(c("a","b","c"),1:3))
d
sapply(d[2],function(i){switch(i==1, "is one",i==2,"is two",i==3,"is 3")})
sapply(d[2],function(i){ifelse(i==1, 1,0)})
cbind(d,flags)
flags <- sapply(d[2],function(i){ifelse(i==1, 1,0)})
cbind(d,flags)
sapply(d[2],function(i){if(i==2,"is two")})
sapply(d[2],function(i){if(i==2,"is two", NULL)})
datwe <- data.frame(replicate(37,sample(c(1,2,99),10,rep=TRUE)))
View(datwe)
res <- as.data.frame(
sapply(datwe[,23:37], function(i)
ifelse(i==1, "Yes",
ifelse(i==2, "No",
ifelse(i==99,NA,"Name itttt")))))
datwe <- cbind(datwe[, 1:22],res)
datwe[,23:24]
sapply(d[2],function(i){switch(i, 1="is one",2="is two",3="is 3")})
datwe[,23:24]
res <- as.data.frame(
sapply(datwe[,23:37], function(i){
if(i==1){
"Yes"
} else if(i==2){
"No"
} else
"something else"
}
#update dataframe
datwe <- cbind(datwe[, 1:22],res)
#output, just showing first 2 columns
datwe[,23:24]
res <- as.data.frame(
sapply(datwe[,23:37], function(i){
if(i==1){
"Yes"
} else if(i==2){
"No"
} else
"something else"
}
#update dataframe
datwe <- cbind(datwe[, 1:22],res)
#output, just showing first 2 columns
datwe[,23:24]
datwe
res <- as.data.frame(
sapply(datwe[,23:37], function(i){
if(i==1){
"Yes"
} else if(i==2){
"No"
} else
"something else"
}
)
)
res <- as.data.frame(
sapply(datwe[,23:37], function(i){
if(i==1){
"Yes"
} else if(i==2){
"No"
} else
"something else"
}
)
)
df2
as.data.frame(sapply(df2[(6:ncol(df2))],function(i)
ifelse(i>0,1,0)))
as.data.frame(sapply(df2[(6:ncol(df2))],function(i)
ifelse(i>0,1,0)))
as.data.frame(sapply(df2[(6:ncol(df2))],function(i){
ifelse(i>0,1,0)}))
df2 <- df.txt1
df2
colSums(df2)
colSums(df2[6:ncol(df2)])
df2 <- as.data.frame(sapply(df2[(6:ncol(df2))],function(i){
ifelse(i>0,1,0)}))
colSums(df2[6:ncol(df2)])
df2 <- df.txt1
colSums(df2[6:ncol(df2)])
df2
df2 <- as.data.frame(sapply(df2[(6:ncol(df2))],function(i){
ifelse(i>0,1,0)}))
df2
cbind(df.txt1[1:6],df2)
ncol(cbind(df.txt1[1:6],df2))
ncol(df.txt1)
cbind(df.txt1[1:5],df2)
df2 <- cbind(df.txt1[1:5],df2)
str(df2)
pairs(df2)
df2[-1:5]
df2[-c(1:5)]
pairs(df2[-c(1:5)])
pairs(df2[-c(1:5)])
pairs(df2[-c(1:5)])
pairs(df2[-c(1:5)])
df2 <- df.txt1
df2 <- as.data.frame(sapply(df2[-c(1:5)],function(i){
ifelse(i>0,1,0)}))
df2 <- cbind(df.txt1[1:5],df2)
str(df2)
df2 <- df.txt1
str(df2)
df2 <- as.data.frame(sapply(df2[-c(1:5)],function(i){
ifelse(i>0,1,0)}))
df2 <- cbind(df.txt1[1:5],df2)
str(df2)
colSums(df2[6:ncol(df2)])
colSums(df2[-c(1:5)])
colSums(df2[c(5,6,22)])
colSums(df2[c(6,22)])
colSums(df2[c(6,25)])
colSums(df.txt1[-c(1:5)])
data.frame(DATA, top9, check.names = FALSE) #put it together
?data.frame
data.frame(df2,ords)
data.frame(df.txt1, df2)
df2 <- df.txt1
df2 <- as.data.frame(sapply(df2[-c(1:5)],function(i){
ifelse(i>0,1,0)}))
df2 <- data.frame(df.txt[1:5],df2)
df2 <- data.frame(df.txt1[1:5],df2)
str(df2)
df2 <- df.txt1
df2 <- as.data.frame(sapply(df2[-c(1:5)],function(i){
ifelse(i>0,1,0)}))
df2 <- cbind(df.txt1[1:5],df2)
str(df2)
colSums(df2[-c(1:5)])
colSums(df.txt1[-c(1:5)])
sort(colSums(df2[-c(1:5)]))
rev(sort(colSums(df2[-c(1:5)])))[1:15]
ords <- rev(sort(colSums(df2[-c(1:5)])))[1:15]
ords
df2
df.txt1
data.frame(DATA, top9, check.names = FALSE) #put it together
df.txt1
DATA.top9 <- data.frame(DATA, top9, check.names = FALSE) #put it together
DATA.top9
pairs(DATA.top9)
pairs(DATA.top9[-c(1:5)])
freqs <- t(wfm(DATA$state, 1:nrow(DATA)))
ords <- rev(sort(colSums(freqs)))[1:9] #top 9 words
top9 <- freqs[, names(ords)] #grab those columns from freqs
DATA.top9 <- data.frame(DATA, top9, check.names = FALSE) #put it together
pairs(DATA.top9[-c(1:5)])
df.txt1 <- data.frame(DATA, freqs, check.names = FALSE)
df2 <- df.txt1
df2 <- as.data.frame(sapply(df2[-c(1:5)],function(i){
ifelse(i>0,1,0)}))
df2 <- cbind(df.txt1[1:5],df2)
df2.ords <- rev(sort(colSums(df2[-c(1:5)])))[1:15] #top 9 words BY ROW (IR) OCCURENCE
df2.top15 <- df2[,names(df2.ords)]
df2.ords
names(df2.ords)
df2.wf <- data.frame(df2, df2.top15, check.names = F)
df2.wf
ncol(df2.wf)
dput(head(DATA))
freqs
em <- x
em.freqs <- t(wfm(em$Title, 1:nrow(em)))
em <- x
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak("checkpoint")
checkpoint("2017-07-12")
packages <- c("ggplot2", "tm", "sqldf", "qdap", "scales")
ipak(packages)
em$Title
em$Title <- tolower(em$Title)
em$Title
em$Title <- tm::removeNumbers(em$Title)
em$Title
em <- x
em$Title <- tolower(em$Title)
em$Title
